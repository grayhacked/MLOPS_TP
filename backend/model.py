# -*- coding: utf-8 -*-
"""LAB 5. Regression. Linear Models SOLUTION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZF551YYY6DAEBZfh_TIahtvmU2lh6Ci5

# Regression: New York City Taxi Trip Duration

For the following tasks, you will work with the dataset from the [Playground Prediction Competition: New York City Taxi Trip Duration](https://www.kaggle.com/competitions/nyc-taxi-trip-duration/code?competitionId=6960&sortBy=voteCount).

Based on individual trip attributes, the duration of the trip should be predicted.

**Data fields**

* `id` - a unique identifier for each trip
* `vendor_id` - a code indicating the provider associated with the trip record
* `pickup_datetime` - date and time when the meter was engaged
* `dropoff_datetime` - date and time when the meter was disengaged
* `passenger_count` - the number of passengers in the vehicle (driver entered value)
* `pickup_longitude` - the longitude where the meter was engaged
* `pickup_latitude` - the latitude where the meter was engaged
* `dropoff_longitude` - the longitude where the meter was disengaged
* `dropoff_latitude` - the latitude where the meter was disengaged
* `store_and_fwd_flag` - This flag indicates whether the trip record was held in vehicle memory before sending to the vendor because the vehicle did not have a connection to the server - Y=store and forward; N=not a store and forward trip
* `trip_duration` - duration of the trip in seconds (**target variable**)
"""


import pickle
import pandas as pd
import numpy as np
import os
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler

from sklearn.linear_model import Ridge

# Gobal variables
RANDOM_STATE = 42
path_model = 'model/model.pkl'
data_path = 'data/data.zip'



def load_data():
    data = pd.read_csv(data_path, compression='zip')

    data['pickup_datetime'] = pd.to_datetime(data['pickup_datetime'])

    X = data.drop(columns=['trip_duration'])
    y = data['trip_duration']
    
    return X, y


def transform_target(y):
  return np.log1p(y).rename('log_'+y.name)

def inverse_transform_target(y):
    return np.expm1(y)


def step1_add_features(X):
  res = X.copy()
  
  df_abnormal_dates = X.groupby('pickup_date').size()
  abnormal_dates = df_abnormal_dates[df_abnormal_dates < 6300]
  
  res['weekday'] = res['pickup_datetime'].dt.weekday
  res['month'] = res['pickup_datetime'].dt.month
  res['hour'] = res['pickup_datetime'].dt.hour
  res['abnormal_period'] = res['pickup_datetime'].dt.date.isin(abnormal_dates.index).astype(int)
  
  return res


def perform_preprocessing(X: pd.DataFrame, y: pd.Series):
    y = transform_target(y)
    X['pickup_date'] = X['pickup_datetime'].dt.date

    X = step1_add_features(X)
    
    return X, y


def perform_fitting_model(X_train, y_train, path_model):
    num_features = ['abnormal_period', 'hour']
    cat_features = ['weekday', 'month']
    train_features = num_features + cat_features
    
    column_transformer = ColumnTransformer([
        ('ohe', OneHotEncoder(handle_unknown="ignore"), cat_features),
        ('scaling', StandardScaler(), num_features)]
    )
    
    pipeline = Pipeline(steps=[
        ('ohe_and_scaling', column_transformer),
        ('regression', Ridge())
    ])
    
    model = pipeline.fit(X_train[train_features], y_train)
    
    # save the model
    dir = os.path.dirname(path_model)
    if not os.path.exists(dir):
        os.makedirs(dir)
    with open(path_model, 'wb') as file:
        pickle.dump(model, file)
    
    print('Model is saved in', path_model)

def perform_predict(X: pd.DataFrame, path_model):
    #load the model
    with open(path_model, 'rb') as file:
        model = pickle.load(file)
    
    prediction = model.predict(X)
    prediction = inverse_transform_target(pd.Series(prediction))[0]
    
    return prediction

if __name__ == '__main__':
    X, y = load_data()
    X, y = perform_preprocessing(X, y)
    model = perform_fitting_model(X, y, path_model)
    